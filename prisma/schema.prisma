generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                  Int                   @id @default(autoincrement())
  type                Int                   @default(1)
  name                String?
  email               String?               @unique
  emailVerified       DateTime?             @map("email_verified")
  image               String?
  createdAt           DateTime              @default(now()) @map(name: "created_at")
  updatedAt           DateTime              @updatedAt @map(name: "updated_at")
  assets              Asset[]
  UserBoardPermission UserBoardPermission[]
  posts               Post[]
  accounts            Account[]
  sessions            Session[]

  @@map(name: "users")
}

model Board {
  id                  String                @unique
  content             String
  roomCode            String
  thumbnail           String
  UserBoardPermission UserBoardPermission[]
}

model UserBoardPermission {
  id         Int    @id @default(autoincrement())
  userId     Int
  boardId    String
  permission Int
  user       User   @relation(fields: [userId], references: [id])
  board      Board  @relation(fields: [boardId], references: [id])
}

model Asset {
  id        Int    @id @default(autoincrement())
  userId    Int
  belongsTo User   @relation(fields: [userId], references: [id])
  type      String
  src       String
}

model LibraryAsset {
  id   Int               @id @default(autoincrement())
  type String
  src  String
  tags LibraryAssetTag[]
}

model LibraryAssetTag {
  id      Int          @id @default(autoincrement())
  assetId Int
  asset   LibraryAsset @relation(fields: [assetId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
